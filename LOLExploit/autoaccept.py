from lcu_driver import Connector
import colorama
import os
import time
import ctypes

client = Connector()
colorama.init()
ctypes.windll.kernel32.SetConsoleTitleW("[LF] Auto Accept Tool")

print(colorama.Style.BRIGHT + colorama.Fore.YELLOW + "[LF] Auto Accept Tool :)" + colorama.Style.RESET_ALL) 

@client.ready
async def main(cmd) -> None:
    summoner = await cmd.request('get', '/lol-summoner/v1/current-summoner')
    if summoner.status == 200:
        data: dict = await summoner.json()
        print(colorama.Style.BRIGHT + colorama.Fore.CYAN + "[LF] League of Legends Client has been founded." + colorama.Style.RESET_ALL) 
        print(colorama.Style.BRIGHT + colorama.Fore.MAGENTA + "[LF] Logined Account : " + colorama.Fore.GREEN + data["displayName"] + colorama.Style.RESET_ALL)
        while True:
            onAccept = await OnAcceptTimer(cmd)
            if onAccept is True:
                await Accept(cmd)
            time.sleep(0.1)
    else:
        print(colorama.Style.BRIGHT + colorama.Fore.RED + "[LF] League of Legends has not founded!" + colorama.Style.RESET_ALL)
        int(input())

async def OnAcceptTimer(cmd) -> bool:
    req = await cmd.request("GET", "/lol-matchmaking/v1/ready-check")
    if req.status == 200:
        data: dict = await req.json()
        if data["state"] == "InProgress":
            #print(colorama.Style.BRIGHT + colorama.Fore.GREEN + "[LF] Matchmaking founded." + colorama.Style.RESET_ALL)
            data: dict = await req.json()
            if data["timer"] > 0.0:
                return True
            else:
                return False
    else:
        return False

async def Accept(cmd) -> None:
    req = await cmd.request("POST", "/lol-matchmaking/v1/ready-check/accept")
    #if req.status == 204:
        #print(colorama.Style.BRIGHT + colorama.Fore.GREEN + "[LF] Matchmaking has been accepted." + colorama.Style.RESET_ALL)
    #else:
        #print(colorama.Style.BRIGHT + colorama.Fore.RED + "[LF] Error." + colorama.Style.RESET_ALL)

@client.close
async def clientClosed(cmd) -> None:
    print(colorama.Style.BRIGHT + colorama.Fore.RED + "[LF] Client communication closed." + colorama.Style.RESET_ALL)
    int(input())

client.start()
